const Product = require("../../model/product");
const Category = require("../../model/category");
require("dotenv").config();
const { GoogleGenerativeAI } = require("@google/generative-ai");
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

const chatController = {
  chatWithBot: async (req, res) => {
    //   const { message } = req.body;
    //   try {
    //     const lowerMsg = message.toLowerCase();
    //     // l·∫•y t·∫•t c·∫£ category & products ƒë·ªÉ t√¨m keyword
    //     const allCategories = await Category.find().lean();
    //     const allProducts = await Product.find()
    //       .populate("categoryID") // l·∫•y c·∫£ category ƒë·ªÉ hi·ªÉn th·ªã
    //       .lean({ virtuals: true });
    //     // t√°ch c√°c t·ª´ trong message
    //     const words = lowerMsg.split(/\s+/);
    //     // t√¨m t·ª´ n√†o match category ho·∫∑c product name
    //     let matchedKeyword = null;
    //     let matchedCategory = null;
    //     let matchedProduct = null;
    //     for (let w of words) {
    //       // t√¨m category kh·ªõp t·ª´ng t·ª´
    //       const cat = allCategories.find((c) => c.name.toLowerCase().includes(w));
    //       if (cat) {
    //         matchedKeyword = cat.name.toLowerCase();
    //         matchedCategory = cat;
    //         break;
    //       }
    //       // t√¨m product kh·ªõp t·ª´ng t·ª´
    //       const prod = allProducts.find((p) => p.name.toLowerCase().includes(w));
    //       if (prod) {
    //         matchedKeyword = w;
    //         matchedProduct = prod;
    //         break;
    //       }
    //     }
    //     // n·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c t·ª´ kh√≥a th√¨ fallback l·∫•y t·ª´ cu·ªëi
    //     if (!matchedKeyword) {
    //       matchedKeyword = words[words.length - 1];
    //     }
    //     // t√¨m s·∫£n ph·∫©m theo keyword
    //     let products = [];
    //     if (matchedCategory) {
    //       products = await Product.find({
    //         categoryID: matchedCategory._id,
    //         isDelete: false,
    //       })
    //         .populate("categoryID")
    //         .limit(3)
    //         .lean({ virtuals: true });
    //     } else {
    //       products = await Product.find({
    //         name: { $regex: matchedKeyword, $options: "i" },
    //         isDelete: false,
    //       })
    //         .populate("categoryID")
    //         .limit(3)
    //         .lean({ virtuals: true });
    //     }
    //     // g·ªçi SimSimi ƒë·ªÉ tr·∫£ l·ªùi th√™m
    //     let aiText = "";
    //     try {
    //       const simRes = await axios.get(
    //         `https://api.simsimi.net/v2/?text=${encodeURIComponent(
    //           message
    //         )}&lc=vn`
    //       );
    //       aiText = simRes.data.success || "";
    //     } catch (err) {
    //       console.error("SimSimi l·ªói:", err?.message);
    //     }
    //     // n·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m
    //     if (products.length === 0) {
    //       if (aiText) {
    //         aiText += `\n\nHi·ªán m√¨nh ch∆∞a t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p v·ªõi t·ª´ kh√≥a "${matchedKeyword}".`;
    //       } else {
    //         aiText = `Xin l·ªói, m√¨nh ch∆∞a t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p v·ªõi t·ª´ kh√≥a "${matchedKeyword}". B·∫°n c√≥ th·ªÉ th·ª≠ t·ª´ kh√≥a kh√°c nh√©.`;
    //       }
    //     }
    //     // n·∫øu c√≥ s·∫£n ph·∫©m
    //     if (products.length > 0) {
    //       // N·∫øu ng∆∞·ªùi d√πng h·ªèi gi√° / gi·∫£m gi√° ‚Üí tr·∫£ chi ti·∫øt h∆°n
    //       if (
    //         lowerMsg.includes("gi√°") ||
    //         lowerMsg.includes("bao nhi√™u") ||
    //         lowerMsg.includes("gi·∫£m")
    //       ) {
    //         aiText = `M√¨nh t√¨m th·∫•y ${products.length} s·∫£n ph·∫©m. ƒê√¢y l√† th√¥ng tin chi ti·∫øt:`;
    //         products.forEach((p, i) => {
    //           const base = `${i + 1}. ${
    //             p.name
    //           } - Gi√° g·ªëc: ${p.price.toLocaleString()}ƒë`;
    //           const discount =
    //             p.discount && p.discount > 0
    //               ? ` | Gi√° sau gi·∫£m: ${p.discountedPrice.toLocaleString()}ƒë (-${
    //                   p.discount
    //                 }%)`
    //               : "";
    //           const category = p.categoryID
    //             ? ` | Danh m·ª•c: ${p.categoryID.name}`
    //             : "";
    //           aiText += `\n${base}${discount}${category}`;
    //         });
    //       } else {
    //         // N·∫øu kh√¥ng h·ªèi gi√° ‚Üí li·ªát k√™ t√™n s·∫£n ph·∫©m
    //         const listNames = products.map((p) => p.name).join(", ");
    //         if (aiText) {
    //           aiText += `\n\nM·ªôt s·ªë s·∫£n ph·∫©m ph√π h·ª£p: ${listNames}`;
    //         } else {
    //           aiText = `M√¨nh g·ª£i √Ω b·∫°n c√°c s·∫£n ph·∫©m: ${listNames}`;
    //         }
    //       }
    //     }
    //     if (!aiText) {
    //       aiText = "Xin l·ªói, t√¥i ch∆∞a c√≥ c√¢u tr·∫£ l·ªùi.";
    //     }
    //     return res.json({
    //       reply: aiText,
    //       products,
    //     });
    //   } catch (err) {
    //     console.error(err);
    //     return res.status(500).json({
    //       reply: "C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau.",
    //       products: [],
    //     });
    //   }
  },

  // üß† Chat b·∫±ng AI + t√¨m s·∫£n ph·∫©m
  handleMessage: async (req, res) => {
    const { message } = req.body;
    try {
      const lowerMsg = message.toLowerCase().trim();
      const greetingKeywords = ["hi", "hello", "xin ch√†o", "ch√†o", "alo", "√™"];

      const isGreeting = greetingKeywords.some(
        (keyword) => lowerMsg === keyword || lowerMsg.includes(keyword)
      );

      // --- KI·ªÇM TRA CH√ÄO H·ªéI ---
      if (isGreeting) {
        const replyMessage =
          "Ch√†o b·∫°n üëã! T√¥i l√† tr·ª£ l√Ω AI. B·∫°n ƒëang t√¨m ki·∫øm s·∫£n ph·∫©m n√†o? H√£y m√¥ t·∫£ ƒë·ªÉ t√¥i t∆∞ v·∫•n nh√©!";
        return res.json({
          reply: replyMessage,
          products: [],
        });
      }

      // --- L·∫§Y D·ªÆ LI·ªÜU C∆† S·ªû ---
      const allCategories = await Category.find().lean();
      const allProducts = await Product.find()
        .populate("categoryID")
        .lean({ virtuals: true });

      let filteredProducts = [];
      let matchedCategory = null;
      let matchedKeyword = null;

      // 1. T√åM KI·∫æM S·∫¢N PH·∫®M (∆ØU TI√äN C·ª§M T·ª™)

      // 1.1 ∆Øu ti√™n t√¨m ki·∫øm theo T√äN CATEGORY kh·ªõp v·ªõi to√†n b·ªô tin nh·∫Øn ng∆∞·ªùi d√πng
      matchedCategory = allCategories.find(
        (c) =>
          lowerMsg.includes(c.name.toLowerCase()) ||
          c.name.toLowerCase().includes(lowerMsg)
      );

      if (matchedCategory) {
        matchedKeyword = matchedCategory.name.toLowerCase();
        // L·ªçc theo Category n·∫øu t√¨m th·∫•y
        filteredProducts = allProducts.filter(
          (p) =>
            String(p.categoryID?._id) === String(matchedCategory._id) &&
            !p.isDelete
        );
      } else {
        // 1.2 N·∫øu kh√¥ng kh·ªõp Category theo c·ª•m t·ª´, t√¨m ki·∫øm theo t·ª´ kh√≥a ƒë∆°n
        const words = lowerMsg.split(/\s+/).filter((w) => w.length > 2);

        // L·∫∑p qua t·ª´ ƒë∆°n ƒë·ªÉ t√¨m Category ho·∫∑c Product kh·ªõp
        for (let w of words) {
          // T√¨m Category kh·ªõp (v√≠ d·ª•: 'n·ªØ' kh·ªõp v·ªõi 'Th·ªùi trang n·ªØ')
          const cat = allCategories.find((c) =>
            c.name.toLowerCase().includes(w)
          );
          if (cat) {
            matchedKeyword = cat.name.toLowerCase();
            matchedCategory = cat;
            break;
          }
          // T√¨m Product kh·ªõp
          const prod = allProducts.find((p) =>
            p.name.toLowerCase().includes(w)
          );
          if (prod) {
            matchedKeyword = w;
            break;
          }
        }

        // Fallback l·∫•y t·ª´ cu·ªëi n·∫øu kh√¥ng t√¨m th·∫•y
        if (!matchedKeyword && words.length > 0) {
          matchedKeyword = words[words.length - 1];
        } else if (!matchedKeyword) {
          matchedKeyword = message;
        }

        // 1.3 L·ªçc s·∫£n ph·∫©m d·ª±a tr√™n k·∫øt qu·∫£ t√¨m ki·∫øm t·ª´ kh√≥a ƒë∆°n
        if (matchedCategory) {
          filteredProducts = allProducts.filter(
            (p) =>
              String(p.categoryID?._id) === String(matchedCategory._id) &&
              !p.isDelete
          );
        } else {
          // L·ªçc theo t√™n s·∫£n ph·∫©m b·∫±ng Regex
          const regex = new RegExp(matchedKeyword, "i");
          filteredProducts = allProducts.filter(
            (p) => regex.test(p.name) && !p.isDelete
          );
        }
      }

      // Ch·ªâ tr·∫£ v·ªÅ t·ªëi ƒëa 3 s·∫£n ph·∫©m ƒë·ªÉ hi·ªÉn th·ªã (cho frontend)
      const productsForDisplay = filteredProducts.slice(0, 3);

      // --- 2. CHU·∫®N B·ªä V√Ä G·ªåI GEMINI ---

      // D√πng danh s√°ch s·∫£n ph·∫©m ƒë√£ l·ªçc ƒë·ªÉ l√†m Context cho AI
      const productListForAI = filteredProducts
        .map(
          (p) =>
            // G·ª≠i th√¥ng tin ƒë·∫ßy ƒë·ªß, bao g·ªìm URL h√¨nh ·∫£nh v√† gi√°
            `T√™n: ${p.name}, H√¨nh ·∫£nh: ${p.image}, Gi√°: ${p.price}‚Ç´, Gi·∫£m: ${p.discount}%, M√¥ t·∫£: ${p.description}, Danh m·ª•c: ${p.categoryID?.name}`
        )
        .join("\n");

      // N·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o li√™n quan, g·ª≠i prompt t·ªïng qu√°t h∆°n
      const contextPrompt = productListForAI
        ? `ƒê√¢y l√† danh s√°ch s·∫£n ph·∫©m li√™n quan ƒë·∫øn truy v·∫•n c·ªßa ng∆∞·ªùi d√πng:\n${productListForAI}`
        : `Hi·ªán t·∫°i t√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o kh·ªõp ch√≠nh x√°c v·ªõi t·ª´ kh√≥a c·ªßa ng∆∞·ªùi d√πng. D∆∞·ªõi ƒë√¢y l√† T·∫§T C·∫¢ s·∫£n ph·∫©m t√¥i ƒëang c√≥:\n${allProducts
            .map((p) => `T√™n: ${p.name}, Danh m·ª•c: ${p.categoryID?.name}`)
            .join(", ")}`;

      const prompt = `
        B·∫°n l√† tr·ª£ l√Ω b√°n h√†ng th√¢n thi·ªán. ${contextPrompt}
        Ng∆∞·ªùi d√πng h·ªèi: "${message}"
        H√£y t∆∞ v·∫•n chi ti·∫øt, th√¢n thi·ªán, v√† gi·ªõi thi·ªáu c√°c s·∫£n ph·∫©m T·ª™ danh s√°ch c√≥ li√™n quan.
        N·∫øu danh s√°ch r·ªóng, h√£y xin l·ªói v√† g·ª£i √Ω c√°c s·∫£n ph·∫©m c√≥ s·∫µn (Th·ªùi trang nam, v.v.).
      `;

      // G·ª¨I PROMPT V√Ä L·∫§Y PH·∫¢N H·ªíI AI
      const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });
      const result = await model.generateContent(prompt);
      const aiReply = result.response.text();

      // 4. TR·∫¢ V·ªÄ C·∫¢ VƒÇN B·∫¢N AI V√Ä S·∫¢N PH·∫®M ƒê√É T√åM ƒê∆Ø·ª¢C
      res.json({
        reply: aiReply,
        products: productsForDisplay,
      });
    } catch (err) {
      console.error("L·ªói Chatbot:", err);
      res.status(500).json({ error: "L·ªói chatbot" });
    }
  },
};
module.exports = chatController;
