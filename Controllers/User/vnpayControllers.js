const { VNPay, HashAlgorithm, ProductCode } = require("vnpay");
const Order = require("../../model/order");
const renderPaymentResultPage = require("../../utils/renderPaymentResultPage");
const User = require("../../model/User");

const vnpay = new VNPay({
  // ‚ö° C·∫•u h√¨nh b·∫Øt bu·ªôc
  tmnCode: "H0HKG0HO",
  secureSecret: "S4RE1WBDYT63XIKY5D1L8GXMCPZAD7Q7",
  vnpayHost: "https://sandbox.vnpayment.vn",

  // üîß C·∫•u h√¨nh t√πy ch·ªçn
  testMode: true, // Ch·∫ø ƒë·ªô test
  hashAlgorithm: "SHA512", // Thu·∫≠t to√°n m√£ h√≥a
  enableLog: true, // B·∫≠t/t·∫Øt log
  //   loggerFn: ignoreLogger, // Custom logger
});

const VNPayControllers = {
  createPaymentURL: async (req, res) => {
    try {
      const { orderID } = req.params;
      const order = await Order.findById(orderID);
      if (!order) {
        return res
          .status(403)
          .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
      }
      const paymentURL = vnpay.buildPaymentUrl({
        vnp_Amount: order.finalPrice,
        vnp_TxnRef: order._id.toString(),
        vnp_OrderInfo: `Thanh to√°n ƒë∆°n h√†ng #${order._id}`,
        vnp_IpAddr: req.headers["x-forwarded-for"] || req.socket.remoteAddress,
        vnp_Locale: "vn",
        vnp_OrderType: ProductCode.Other,
        vnp_ReturnUrl: "http://localhost:5000/v1/user/pay/vnpay_return", // <-- chuy·ªÉn ƒë·∫øn trang th√¥ng b√°o
      });

      return res.status(200).json({ success: true, paymentURL });
    } catch (error) {
      console.log(error);
      return res.status(500).json({ success: false, message: "L·ªói server" });
    }
  },
  paymentReturn: async (req, res) => {
    const verified = vnpay.verifyReturnUrl(req.query);
    const orderId = req.query.vnp_TxnRef;
    const responseCode = req.query.vnp_ResponseCode; // M√£ ph·∫£n h·ªìi c·ªßa VNPay // T√¨m ƒë∆°n h√†ng

    const order = await Order.findById(orderId);
    const user = order ? await User.findById(order.userInfo) : null;
    const cartID = order ? order.cartID : null;

    if (!verified || !order || !user) {
      // Th·∫≠m ch√≠ n·∫øu x√°c th·ª±c th·∫•t b·∫°i, v·∫´n c·ªë g·∫Øng c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng n·∫øu t√¨m th·∫•y
      if (order) {
        order.paymentStatus = "Th·∫•t B·∫°i";
        await order.save();
      }
      return res.send(
        renderPaymentResultPage({
          success: false,
          errorCode: "X√°c th·ª±c th·∫•t b·∫°i/Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
        })
      );
    } // N·∫øu thanh to√°n th√†nh c√¥ng
    if (responseCode === "00") {
      // Ki·ªÉm tra tr√°nh x·ª≠ l√Ω tr√πng l·∫∑p
      if (order.paymentStatus === "ƒêang Ch·ªù") {
        try {
          // 1. X·ª≠ l√Ω th√†nh c√¥ng ƒë∆°n h√†ng (tr·ª´ ƒëi·ªÉm, c·ªông th∆∞·ªüng, gi·∫£m kho/voucher)
          // *G·ªçi h√†m processOrderSuccess ƒë√£ ƒë·ªãnh nghƒ©a ·ªü tr√™n (b·∫°n c·∫ßn import)
          await processOrderSuccess(order, user); // 2. C·∫≠p nh·∫≠t tr·∫°ng th√°i
          order.paymentStatus = "Th√†nh C√¥ng";
          order.orderStatus = "ƒê√£ X√°c Nh·∫≠n"; // Chuy·ªÉn sang ƒë√£ x√°c nh·∫≠n v√¨ ƒë√£ thanh to√°n
          await order.save(); // 3. X√≥a gi·ªè h√†ng
          await Cart.findByIdAndDelete(cartID);
        } catch (error) {
          console.error("L·ªói x·ª≠ l√Ω ƒëi·ªÉm/kho sau VNPay:", error); // C√≥ th·ªÉ log l·ªói nh∆∞ng v·∫´n tr·∫£ v·ªÅ th√†nh c√¥ng cho ng∆∞·ªùi d√πng
        }
      } // Tr·∫£ v·ªÅ trang th√¥ng b√°o
      return res.send(renderPaymentResultPage({ success: true, orderId }));
    } else {
      // Thanh to√°n th·∫•t b·∫°i (vnp_ResponseCode !== "00")
      if (order.paymentStatus === "ƒêang Ch·ªù") {
        order.paymentStatus = "Th·∫•t B·∫°i";
        order.orderStatus = "ƒê√£ H·ªßy"; // ƒê∆°n h√†ng b·ªã h·ªßy n·∫øu thanh to√°n th·∫•t b·∫°i
        await order.save();
      }
      return res.send(
        renderPaymentResultPage({
          success: false,
          errorCode: responseCode,
        })
      );
    }
  },
};

module.exports = VNPayControllers;
