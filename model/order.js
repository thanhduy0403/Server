const mongoose = require("mongoose");
const Schema = mongoose.Schema;

const orderSchema = new Schema({
  userInfo: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true,
  },
  cartID: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Cart",
    required: true,
  },
  products: [
    {
      quantity: { type: Number, required: true },
      product: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Product",
        required: true,
      },
      price: {
        type: Number,
        require: true,
      },
      nameSnapshot: {
        type: String,
        require: true,
      },
      size: {
        type: String,
        require: true,
      },
    },
  ],
  createdAt: {
    type: Date,
    default: Date.now,
  },
  confirmedAt: Date,
  address: {
    province: { type: String }, // T·ªânh/Th√†nh ph·ªë
    district: { type: String }, // Qu·∫≠n/Huy·ªán
    ward: { type: String }, // Ph∆∞·ªùng/X√£
    street: { type: String }, // ƒê·ªãa ch·ªâ c·ª• th·ªÉ
  },
  username_Receive: {
    type: String,
    required: true,
  },
  phoneNumber: {
    type: String,
    required: true,
  },
  note: {
    type: String,
  },
  deletedAt: {
    type: Date,
  },
  isDeleted: {
    type: Boolean,
    default: false,
  },
  orderStatus: {
    type: String,
    enum: ["Ch∆∞a X√°c Nh·∫≠n", "ƒê√£ X√°c Nh·∫≠n", "ƒêang Giao", "Ho√†n Th√†nh", "ƒê√£ H·ªßy"],
    default: "Ch∆∞a X√°c Nh·∫≠n",
  },
  expectedDeliveryAt: {
    type: Date,
  },
  paymentMethod: {
    type: String,
    enum: ["Thanh To√°n Khi Nh·∫≠n H√†ng", "Thanh To√°n Online", "Th·∫•t B·∫°i"],
  },
  receivedStatus: {
    type: String,
    enum: ["Ch∆∞a Nh·∫≠n", "ƒê√£ Nh·∫≠n"],
    default: "Ch∆∞a Nh·∫≠n",
  },
  // üîπ Tr·∫°ng th√°i thanh to√°n (m·ªõi th√™m)
  paymentStatus: {
    type: String,
    enum: ["ƒêang Ch·ªù", "Th√†nh C√¥ng", "Th·∫•t B·∫°i", "Ho√†n Ti·ªÅn"],
    default: "ƒêang Ch·ªù",
  },
  totalPriceProduct: { type: Number, required: true },
  // c√°c tr∆∞·ªùng li√™n quan voucher
  discountAmount: { type: Number, default: 0 },
  finalPrice: { type: Number, required: true },
  voucherApplied: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Voucher",
    default: null,
  },
  pointsUser: {
    type: Number,
    default: 0,
  },
});

module.exports = mongoose.model("Order", orderSchema);
